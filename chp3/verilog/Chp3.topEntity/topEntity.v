/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.9.0. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire [3:0] SWITCHES


      // Outputs
    , output wire [3:0] SS_CAT
    , output wire [6:0] SS_SEG
    , output wire  SS_DP
    );
  wire [6:0] c$app_arg;
  wire [6:0] c$app_arg_0;
  wire [6:0] c$case_alt;
  wire [6:0] c$case_alt_0;
  wire [6:0] c$case_alt_1;
  wire [6:0] c$case_alt_2;
  wire [6:0] c$case_alt_3;
  wire [6:0] c$case_alt_4;
  wire [6:0] c$case_alt_5;
  wire [6:0] c$case_alt_6;
  wire [6:0] c$case_alt_7;
  wire [6:0] c$case_alt_8;
  wire [6:0] c$case_alt_9;
  wire [6:0] c$case_alt_10;
  wire [6:0] c$case_alt_11;
  wire [6:0] c$case_alt_12;
  wire [6:0] c$case_alt_13;
  wire [6:0] result;
  wire [6:0] c$vec;
  wire [3:0] SS__dc_arg_res;
  wire [3:0] c$vec_0;
  wire [11:0] SS;

  // map begin
  genvar i;
  generate
  for (i=0; i < 7; i = i + 1) begin : map
    wire  map_in;
    assign map_in = result[i*1+:1];
    wire  map_out;
    wire [0:0] c$app_arg_1;
    wire  result_0;
    assign map_out = result_0;

    assign c$app_arg_1 = map_in ? 1'b1 : 1'b0;

    assign result_0 = (c$app_arg_1);


    assign c$app_arg[i*1+:1] = map_out;
  end
  endgenerate
  // map end

  assign c$app_arg_0 = (((((SWITCHES)))) == 4'd0) ? 7'b1111110 : c$case_alt;

  assign c$case_alt = (((((SWITCHES)))) == 4'd1) ? 7'b0110000 : c$case_alt_0;

  assign c$case_alt_0 = (((((SWITCHES)))) == 4'd2) ? 7'b1101101 : c$case_alt_1;

  assign c$case_alt_1 = (((((SWITCHES)))) == 4'd3) ? 7'b1111001 : c$case_alt_2;

  assign c$case_alt_2 = (((((SWITCHES)))) == 4'd4) ? 7'b0110011 : c$case_alt_3;

  assign c$case_alt_3 = (((((SWITCHES)))) == 4'd5) ? 7'b1011011 : c$case_alt_4;

  assign c$case_alt_4 = (((((SWITCHES)))) == 4'd6) ? 7'b1011111 : c$case_alt_5;

  assign c$case_alt_5 = (((((SWITCHES)))) == 4'd7) ? 7'b1110000 : c$case_alt_6;

  assign c$case_alt_6 = (((((SWITCHES)))) == 4'd8) ? 7'b1111111 : c$case_alt_7;

  assign c$case_alt_7 = (((((SWITCHES)))) == 4'd9) ? 7'b1110011 : c$case_alt_8;

  assign c$case_alt_8 = (((((SWITCHES)))) == 4'd10) ? 7'b1110111 : c$case_alt_9;

  assign c$case_alt_9 = (((((SWITCHES)))) == 4'd11) ? 7'b0011111 : c$case_alt_10;

  assign c$case_alt_10 = (((((SWITCHES)))) == 4'd12) ? 7'b1001110 : c$case_alt_11;

  assign c$case_alt_11 = (((((SWITCHES)))) == 4'd13) ? 7'b0111101 : c$case_alt_12;

  assign c$case_alt_12 = (((((SWITCHES)))) == 4'd14) ? 7'b1001111 : c$case_alt_13;

  assign c$case_alt_13 = (((((SWITCHES)))) == 4'd15) ? 7'b1000111 : ({7 {1'bx}});

  assign c$vec = (c$app_arg_0);

  // map begin
  genvar i_0;
  generate
  for (i_0=0; i_0 < 7; i_0 = i_0 + 1) begin : map_0
    wire [0:0] map_in_0;
    assign map_in_0 = c$vec[i_0*1+:1];
    wire  map_out_0;
    assign map_out_0 = map_in_0 == 1'b1;


    assign result[i_0*1+:1] = map_out_0;
  end
  endgenerate
  // map end

  assign c$vec_0 = {1'b0,   1'b0,   1'b0,   1'b1};

  // map begin
  genvar i_1;
  generate
  for (i_1=0; i_1 < 4; i_1 = i_1 + 1) begin : map_1
    wire  map_in_1;
    assign map_in_1 = c$vec_0[i_1*1+:1];
    wire  map_out_1;
    wire [0:0] c$app_arg_2;
    wire  result_1;
    assign map_out_1 = result_1;

    assign c$app_arg_2 = map_in_1 ? 1'b1 : 1'b0;

    assign result_1 = ~ ((c$app_arg_2));


    assign SS__dc_arg_res[i_1*1+:1] = map_out_1;
  end
  endgenerate
  // map end

  assign SS = {SS__dc_arg_res,   c$app_arg,
               1'b0};

  assign SS_CAT = SS[11:8];

  assign SS_SEG = SS[7:1];

  assign SS_DP = SS[0:0];


endmodule

